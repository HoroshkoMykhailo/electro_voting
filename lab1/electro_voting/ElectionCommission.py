from electro_voting.hashing import quadratic_hash
from electro_voting.key_generation import generate_rsa_keys
from electro_voting.sign import verify

class CentralElectionCommission:
    def __init__(self, candidates, voter_ids):
        self.candidates = {candidate: 0 for candidate in candidates}
        self.voter_ids = voter_ids
        
        p, q = 61, 53 
        self.public_key, self.private_key = generate_rsa_keys(p, q)
        print("üîë –¶–í–ö –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∞ –≤–ª–∞—Å–Ω—É –ø–∞—Ä—É –∫–ª—é—á—ñ–≤.")
        
        self.voter_public_keys = {}
        self._voter_private_keys = {}
        self.received_ballots = {}
        self.has_voted = []

    def generate_voter_keys(self):
        primes = [101, 103, 107, 109, 113, 127, 131, 137, 139, 149]
        for i, voter_id in enumerate(self.voter_ids):
            p, q = primes[2*i], primes[2*i+1]
            pub_key, priv_key = generate_rsa_keys(p, q)
            self.voter_public_keys[voter_id] = pub_key
            self._voter_private_keys[voter_id] = priv_key
        print("üîë –¶–í–ö –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∞ –∫–ª—é—á—ñ –¥–ª—è –≤—Å—ñ—Ö –≤–∏–±–æ—Ä—Ü—ñ–≤.")
    
    def get_voter_private_key(self, voter_id):
        return self._voter_private_keys[voter_id]
    
    def receive_ballot(self, voter_id, ballot_package):
        """
        –ü—Ä–∏–π–º–∞—î —Ç–∞ —Ä–µ—î—Å—Ç—Ä—É—î –±—é–ª–µ—Ç–µ–Ω—å, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ñ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è.
        """
        if voter_id in self.received_ballots:
            print(f"üì¨ -> ‚ùå –ë—é–ª–µ—Ç–µ–Ω—å –≤—ñ–¥ '{voter_id}' –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ä–∞–Ω—ñ—à–µ. –ü–æ–≤—Ç–æ—Ä–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ.")
            return
        
        self.received_ballots[voter_id] = ballot_package
        print(f"üì¨ –¶–í–ö –æ—Ç—Ä–∏–º–∞–ª–∞ –±—é–ª–µ—Ç–µ–Ω—å –≤—ñ–¥ '{voter_id}'.")

    def process_ballots(self):
        print("\n--- PROCESSING: –¶–í–ö –ø–æ—á–∏–Ω–∞—î –æ–±—Ä–æ–±–∫—É –±—é–ª–µ—Ç–µ–Ω—ñ–≤ ---\n")
        for voter_id, ballot_data in self.received_ballots.items():
            print(f"–û–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –±—é–ª–µ—Ç–µ–Ω—è –≤—ñ–¥ '{voter_id}':")
            
            try:
                voter_public_key = self.voter_public_keys[voter_id]
            except KeyError:
                print(f"  -> ‚ùå –ü–û–ú–ò–õ–ö–ê: –í–∏–±–æ—Ä–µ—Ü—å '{voter_id}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É —Ä–µ—î—Å—Ç—Ä—ñ.")
                print("  -> –ë—é–ª–µ—Ç–µ–Ω—å –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ.")
                print("-" * 20)
                continue

            choice = ballot_data['choice']
            signature = ballot_data['signature']

            print(f"  -> –û—Ç—Ä–∏–º–∞–Ω–æ –ø—ñ–¥–ø–∏—Å: {signature}")
            
            hash_from_signature = verify(signature, voter_public_key)
            print(f"  -> –ó –ø—ñ–¥–ø–∏—Å—É –æ—Ç—Ä–∏–º–∞–Ω–æ —Ö–µ—à: {hash_from_signature}")

            expected_hash = quadratic_hash(choice, voter_public_key[1])
            print(f"  -> –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ö–µ—à –¥–ª—è '{choice}': {expected_hash}")
            
            if hash_from_signature == expected_hash:
            
                print(f"  -> ‚úÖ –ü—ñ–¥–ø–∏—Å –¥—ñ–π—Å–Ω–∏–π. –•–µ—à—ñ –∑–±—ñ–≥–∞—é—Ç—å—Å—è.")
                try:
                    self.candidates[choice] += 1
                except KeyError:
                    print(f"  -> ‚ùå –ü–û–ú–ò–õ–ö–ê: –ë—é–ª–µ—Ç–µ–Ω—å –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ.")
                    print("  -> –ë—é–ª–µ—Ç–µ–Ω—å –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ.")
                    print("-" * 20)
                    continue
                print(f"  -> ‚úÖ –ì–æ–ª–æ—Å –∑–∞ '{choice}' –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.")
            else:
                print(f"  -> ‚ùå –ü–Ü–î–ü–ò–° –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ò–ô. –•–µ—à—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è.")
            print("-" * 20)

    def publish_results(self):
        print("\n--- üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ì–û–õ–û–°–£–í–ê–ù–ù–Ø ---")
        for candidate, votes in self.candidates.items():
            print(f"–ö–∞–Ω–¥–∏–¥–∞—Ç '{candidate}': {votes} –≥–æ–ª–æ—Å—ñ–≤")

        if not any(self.candidates.values()):
            print("\n–ñ–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å—É –Ω–µ –±—É–ª–æ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.")
            return

        max_votes = max(self.candidates.values())
        winners = [candidate for candidate, num_votes in self.candidates.items() if num_votes == max_votes]
        
        if len(winners) > 1:
            tied_candidates = ", ".join(winners)
            print(f"\nü§ù –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω—ñ—á–∏—è! –ö–∞–Ω–¥–∏–¥–∞—Ç–∏ '{tied_candidates}' –Ω–∞–±—Ä–∞–ª–∏ –ø–æ {max_votes} –≥–æ–ª–æ—Å—ñ–≤.")
            print("–ü–æ—Ç—Ä—ñ–±–Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è.")
        else:
            winner = winners[0]
            print(f"\nüèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winner}")