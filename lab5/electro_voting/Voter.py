import random
from electro_voting.encrypt import encrypt, decrypt, sign, encode_vote_with_rp, decode_vote_and_rp
from electro_voting.hashing import int_hash

class Voter:
    def __init__(self, name, keypair):
        self.name = name
        self.encrypted1 = None
        self.encrypted2 = None
        self.public_key, self.private_key = keypair
        self.rp1 = random.randrange(1, 100)
        self.rp2 = random.randrange(1, 100)
        print(f"üë§ –°—Ç–≤–æ—Ä–µ–Ω–æ {self.name}")

    def create_ballot(self, vote_id: int, voter_objects_ordered):
        """
        –°—Ç–≤–æ—Ä—é—î –±—é–ª–µ—Ç–µ–Ω—å, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —É –¥–≤–∞ —Ä–∞—É–Ω–¥–∏:
        1. –ü–µ—Ä—à–∏–π —Ä–∞—É–Ω–¥: —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏–º–∏ –∫–ª—é—á–∞–º–∏ E‚ÜíD‚ÜíC‚ÜíB‚ÜíA.
           –ö–æ–ª–∏ —á–µ—Ä–≥–∞ –¥–æ—Ö–æ–¥–∏—Ç—å –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—Ü—è, –¥–æ–¥–∞—î—Ç—å—Å—è RP –ø–µ—Ä–µ–¥ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è–º.
        2. –î—Ä—É–≥–∏–π —Ä–∞—É–Ω–¥: –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –µ—Ç–∞–ø—É —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è.
        """
        # --- 1Ô∏è‚É£ –ë–∞–∑–æ–≤–∏–π –±—é–ª–µ—Ç–µ–Ω—å (–±–µ–∑ RP) ---
        encrypted_ballot = vote_id

        # --- 2Ô∏è‚É£ –ü–µ—Ä—à–∏–π —Ä–∞—É–Ω–¥ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è ---
        for voter in reversed(voter_objects_ordered):
            if voter.name == self.name:
                self.encrypted1 = encrypted_ballot
                encrypted_ballot = encode_vote_with_rp(encrypted_ballot, self.rp1)
            encrypted_ballot = encrypt(voter.public_key, encrypted_ballot)

        # --- 3Ô∏è‚É£ –î—Ä—É–≥–∏–π —Ä–∞—É–Ω–¥ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è ---
        for voter in reversed(voter_objects_ordered):
            if voter.name == self.name:
                self.encrypted2 = encrypted_ballot
                encrypted_ballot = encode_vote_with_rp(encrypted_ballot, self.rp2)
            encrypted_ballot = encrypt(voter.public_key, encrypted_ballot)

        return encrypted_ballot

    def mix_and_decrypt_step(self, ballot_list, round_num):
        """
        –ó–Ω—ñ–º–∞—î –æ–¥–∏–Ω —à–∞—Ä —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∑ —É—Å—ñ—Ö –±—é–ª–µ—Ç–µ–Ω—ñ–≤, –ø–µ—Ä–µ–º—ñ—à—É—î,
        –ø–µ—Ä–µ–≤—ñ—Ä—è—î RP —ñ –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ —Ç—ñ–ª—å–∫–∏ –∑—ñ —Å–≤–æ–≥–æ –±—é–ª–µ—Ç–µ–Ω—è.
        
        round_num = 1 -> –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ rp2
        round_num = 2 -> –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ rp1
        """
        print(f"  -> {self.name} —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î —ñ –ø–µ—Ä–µ–º—ñ—à—É—î {len(ballot_list)} –±—é–ª–µ—Ç–µ–Ω—ñ–≤.")

        rp_to_check = self.rp2 if round_num == 1 else self.rp1
        encrypted_to_check = self.encrypted2 if round_num == 1 else self.encrypted1

        found_own_ballot = False

        decrypted_list = []
        for ballot in ballot_list:
            decrypted = decrypt(self.private_key, ballot)
            vote = decode_vote_and_rp(decrypted, rp_to_check)
            if encrypted_to_check == vote:
                decrypted = vote
                found_own_ballot = True
            decrypted_list.append(decrypted)

        if not found_own_ballot:
            raise Exception(f"!!! –ü–û–ú–ò–õ–ö–ê: {self.name} –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Å–≤—ñ–π –±—é–ª–µ—Ç–µ–Ω—å —É —Ä–∞—É–Ω–¥—ñ {round_num}!")
        
        random.shuffle(decrypted_list)

        list_tuple = tuple(sorted(decrypted_list))
        data_hash = int_hash(list_tuple, self.public_key[1])
        signature = sign(self.private_key, data_hash)

        return decrypted_list, signature