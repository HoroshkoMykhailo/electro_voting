from collections import Counter
import random
from electro_voting.Voter import Voter
from electro_voting.key_generation import generate_common_modulus_and_keys
from electro_voting.hashing import int_hash
from electro_voting.encrypt import verify_signature

SIMULATE_SUBSTITUTION_ATTACK = False
SIMULATE_DELETION_ATTACK = True

NUM_VOTERS = 5
VOTER_NAMES = ["A", "B", "C", "D", "E"]
CANDIDATES = {"–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ": 1, "–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π": 2}

votes = [
    CANDIDATES["–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π"],
    CANDIDATES["–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ"],
    CANDIDATES["–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π"],
    CANDIDATES["–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π"],
    CANDIDATES["–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ"]
]

(p, q, n, phi), keypairs = generate_common_modulus_and_keys(NUM_VOTERS)
print(f"–ó–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –º–æ–¥—É–ª—å n={n} (p={p}, q={q})\n")

voters = [Voter(name, keypairs[i]) for i, name in enumerate(VOTER_NAMES)]

print("\n--- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—Ö –±—é–ª–µ—Ç–µ–Ω—ñ–≤ ---")
encrypted_ballots = []
for i, voter in enumerate(voters):
    ballot = voter.create_ballot(votes[i], voters)
    encrypted_ballots.append(ballot)
    print(f"  {voter.name} —Å—Ñ–æ—Ä–º—É–≤–∞–≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –±—é–ª–µ—Ç–µ–Ω—å.")

print("\n--- –†–∞—É–Ω–¥ 1: —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è RP2 ---")
current_list = encrypted_ballots
last_signature = None

for i, voter in enumerate(voters):
    if i > 0:
        prev = voters[i-1]
        list_tuple = tuple(sorted(current_list))
        data_hash = int_hash(list_tuple, prev.public_key[1])
        if not verify_signature(prev.public_key, last_signature, data_hash):
            raise Exception(f"!!! –í–ò–ö–†–ò–¢–¢–Ø: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø—ñ–¥–ø–∏—Å –≤—ñ–¥ {prev.name}. –°–ø–∏—Å–æ–∫ –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ!")
        else:
            print(f"  ‚úÖ –ü—ñ–¥–ø–∏—Å –≤—ñ–¥ {prev.name} –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ.")
    current_list, last_signature = voter.mix_and_decrypt_step(current_list, round_num=1)

    if SIMULATE_SUBSTITUTION_ATTACK and voter.name == "C":
        print("\n  >>> üòà –ê–¢–ê–ö–ê: –í–∏–±–æ—Ä–µ—Ü—å C —Ç–∞—î–º–Ω–æ –ø—ñ–¥–º—ñ–Ω—è—î –æ–¥–∏–Ω –±—é–ª–µ—Ç–µ–Ω—å! <<<\n")
        current_list[0] = random.randint(1, n) 

    if SIMULATE_DELETION_ATTACK and voter.name == "C":
        print("\n  >>> üòà –ê–¢–ê–ö–ê: –í–∏–±–æ—Ä–µ—Ü—å C —Ç–∞—î–º–Ω–æ –≤–∏–¥–∞–ª—è—î –æ–¥–∏–Ω –±—é–ª–µ—Ç–µ–Ω—å! <<<\n")
        current_list.pop()

prev = voters[-1]
list_tuple = tuple(sorted(current_list))
data_hash = int_hash(list_tuple, prev.public_key[1])
if not verify_signature(prev.public_key, last_signature, data_hash):
    raise Exception(f"!!! –í–ò–ö–†–ò–¢–¢–Ø: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø—ñ–¥–ø–∏—Å –≤—ñ–¥ {prev.name} –ø—ñ—Å–ª—è —Ä–∞—É–Ω–¥—É 1!")
else:
    print(f"  ‚úÖ –§—ñ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å –≤—ñ–¥ {prev.name} –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –ø—ñ—Å–ª—è —Ä–∞—É–Ω–¥—É 1.")

print("\n--- –†–∞—É–Ω–¥ 2: —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è RP1 ---")
for i, voter in enumerate(voters):
    if i > 0:
        prev = voters[i-1]
        list_tuple = tuple(sorted(current_list))
        data_hash = int_hash(list_tuple, prev.public_key[1])
        if not verify_signature(prev.public_key, last_signature, data_hash):
            raise Exception(f"!!! –í–ò–ö–†–ò–¢–¢–Ø: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø—ñ–¥–ø–∏—Å –≤—ñ–¥ {prev.name}. –°–ø–∏—Å–æ–∫ –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ!")
        else:
            print(f"  ‚úÖ –ü—ñ–¥–ø–∏—Å –≤—ñ–¥ {prev.name} –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ.")

    current_list, last_signature = voter.mix_and_decrypt_step(current_list, round_num=2)

prev = voters[-1]
list_tuple = tuple(sorted(current_list))
data_hash = int_hash(list_tuple, prev.public_key[1])
if not verify_signature(prev.public_key, last_signature, data_hash):
    raise Exception(f"!!! –í–ò–ö–†–ò–¢–¢–Ø: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø—ñ–¥–ø–∏—Å –≤—ñ–¥ {prev.name} –ø—ñ—Å–ª—è —Ä–∞—É–Ω–¥—É 2!")
else:
    print(f"  ‚úÖ –§—ñ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å –≤—ñ–¥ {prev.name} –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –ø—ñ—Å–ª—è —Ä–∞—É–Ω–¥—É 2.")

print("\n--- –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≥–æ–ª–æ—Å—ñ–≤ ---")
final_decrypted_votes = current_list
vote_counts = Counter(final_decrypted_votes)
id_to_candidate = {v: k for k, v in CANDIDATES.items()}

print("\n--- –†–ï–ó–£–õ–¨–¢–ê–¢–ò ---")
for cid, cnt in vote_counts.items():
    print(f"{id_to_candidate.get(cid, '–ù–µ–≤—ñ–¥–æ–º–∏–π')}: {cnt} –≥–æ–ª–æ—Å(—ñ–≤)")

original_counts = Counter(votes)
if original_counts == vote_counts:
    print("‚úÖ –£—Å–ø—ñ—Ö ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏.")
else:
    print("‚ùå –ü–æ–º–∏–ª–∫–∞ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è.")
    print("–û—á—ñ–∫—É–≤–∞–ª–æ—Å—å:", dict(original_counts))
    print("–û—Ç—Ä–∏–º–∞–Ω–æ:", dict(vote_counts))