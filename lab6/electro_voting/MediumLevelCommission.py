from collections import Counter
from electro_voting.encrypt import verify_signature, decrypt

class MediumLevelCommission:
    """–í–∏–±–æ—Ä—á–∞ –ö–æ–º—ñ—Å—ñ—è –°–µ—Ä–µ–¥–Ω—å–æ–≥–æ –†—ñ–≤–Ω—è: –∑–±–∏—Ä–∞—î, –æ–±'—î–¥–Ω—É—î —Ç–∞ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î –±—é–ª–µ—Ç–µ–Ω—ñ."""
    def __init__(self, name: str, p: int, q: int):
        from electro_voting.key_generation import generate_keypair
        self.name = name
        self.public_key, self.private_key = generate_keypair(p, q)
        self.parts1 = {}
        self.parts2 = {}
        self.assembled_ballots = {}
        self.decrypted_votes = {}
        print(f"üè§ –°—Ç–≤–æ—Ä–µ–Ω–æ –í–ö–°: {self.name}")

    def receive_parts(self, parts: dict, part_type: int):
        if part_type == 1: self.parts1.update(parts)
        else: self.parts2.update(parts)
        print(f"üì¨ {self.name}: –û—Ç—Ä–∏–º–∞–Ω–æ {len(parts)} —á–∞—Å—Ç–∏–Ω –±—é–ª–µ—Ç–µ–Ω—ñ–≤ —Ç–∏–ø—É {part_type}.")

    def assemble_and_verify(self, cec_pk: tuple, voters: dict):
        """–ó–±–∏—Ä–∞—î –±—é–ª–µ—Ç–µ–Ω—ñ –∑ —á–∞—Å—Ç–∏–Ω —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å–ª—ñ–ø–∏–π –ø—ñ–¥–ø–∏—Å –¶–í–ö."""
        print(f"üß© {self.name}: –û–±'—î–¥–Ω–∞–Ω–Ω—è –±—é–ª–µ—Ç–µ–Ω—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—ñ–≤ –¶–í–ö...")
        n_cec = cec_pk[1]
        n_vcs = self.public_key[1]
        
        for voter_name, (r1, t1) in self.parts1.items():
            if voter_name in self.parts2:
                r2, t2 = self.parts2[voter_name]
                c = (r1 * r2) % n_vcs
                s = (t1 * t2) % n_cec
                
                voter = voters[voter_name]
                from electro_voting.hashing import int_hash
                ballot_hash = int_hash(voter.ballot_id, n_cec)

                if verify_signature(cec_pk, s, ballot_hash):
                    self.assembled_ballots[voter_name] = c
                else:
                    print(f"üî• –£–í–ê–ì–ê: –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø—ñ–¥–ø–∏—Å –¶–í–ö –¥–ª—è –±—é–ª–µ—Ç–µ–Ω—è –≤—ñ–¥ {voter_name}!")
        print(f"‚úÖ {self.name}: {len(self.assembled_ballots)} –±—é–ª–µ—Ç–µ–Ω—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑—ñ–±—Ä–∞–Ω–æ.")

    def decrypt_votes(self):
        """–†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î –≤—Å—ñ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ –≥–æ–ª–æ—Å–∏ –≤–ª–∞—Å–Ω–∏–º –∫–ª—é—á–µ–º."""
        for name, c in self.assembled_ballots.items():
            decrypted_int = decrypt(self.private_key, c)
            ballot_id = decrypted_int // 10
            vote = decrypted_int % 10
            self.decrypted_votes[name] = (ballot_id, vote)

    def count_votes(self) -> tuple:
        """–ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î –≥–æ–ª–æ—Å–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —ñ ID –≤—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –±—é–ª–µ—Ç–µ–Ω—ñ–≤."""
        votes = [vote for (_, vote) in self.decrypted_votes.values()]
        results = Counter(votes)
        counted_ids = {ballot_id for (ballot_id, _) in self.decrypted_votes.values()}
        print(f"üìä {self.name}: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—ñ–¥—Ä–∞—Ö–æ–≤–∞–Ω–æ: {dict(results)}")
        return results, counted_ids