import random
from electro_voting.RegistrationBureau import RegistrationBureau
from electro_voting.CEC import CEC
from electro_voting.MediumLevelCommission import MediumLevelCommission
from electro_voting.LowLevelCommission import LowLevelCommission
from electro_voting.Voter import Voter

from electro_voting.key_generation import is_prime, mod_inverse
from electro_voting.candidates import CANDIDATES
from electro_voting.encrypt import sign, encrypt, verify_signature
from electro_voting.hashing import int_hash

print("--- 1. –ü–Ü–î–ì–û–¢–û–í–ß–ò–ô –ï–¢–ê–ü ---\n")
primes = [p for p in range(3000, 8000) if is_prime(p)]
p, q = random.sample(primes, 2)

VOTER_NAMES = ["–í–∏–±–æ—Ä–µ—Ü—å-1", "–í–∏–±–æ—Ä–µ—Ü—å-2", "–í–∏–±–æ—Ä–µ—Ü—å-3", "–í–∏–±–æ—Ä–µ—Ü—å-4", "–í–∏–±–æ—Ä–µ—Ü—å-5", "–í–∏–±–æ—Ä–µ—Ü—å-6"]
VOTES = [CANDIDATES["–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π"], CANDIDATES["–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ"], CANDIDATES["–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π"], 
         CANDIDATES["–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π"], CANDIDATES["–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ"], CANDIDATES["–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π"]]

rb = RegistrationBureau(VOTER_NAMES)
voter_tokens = rb.verify_and_issue_tokens()
voter_list, token_db = rb.get_databases()

cec = CEC(p, q, token_db)
vcs1 = MediumLevelCommission("–í–ö–°-1", p, q)
vcs2 = MediumLevelCommission("–í–ö–°-2", p, q)
cec.set_jurisdictions(voter_list, vcs1.name, vcs2.name)

vkn1 = LowLevelCommission("–í–ö–ù-1", vcs1)
vkn2 = LowLevelCommission("–í–ö–ù-2", vcs1)
vkn3 = LowLevelCommission("–í–ö–ù-3", vcs2)
vkn4 = LowLevelCommission("–í–ö–ù-4", vcs2)

voters = {}
for i, name in enumerate(VOTER_NAMES, start=1):
    voters[name] = Voter(name, p, q, voter_tokens[name], ballot_id=i)

print("\n--- 2. –ï–¢–ê–ü –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á (–°–õ–Ü–ü–ò–ô –ü–Ü–î–ü–ò–°) ---\n")
for voter in voters.values():
    voter.get_blind_signature(cec)

print("\n--- 3. –ï–¢–ê–ü –ì–û–õ–û–°–£–í–ê–ù–ù–Ø ---\n")
for i, name in enumerate(VOTER_NAMES):
    voter = voters[name]
    vote = VOTES[i]
    if name in cec.jurisdictions[vcs1.name]:
        voter.create_and_cast_vote(vote, cec.public_key, vcs1.public_key, vkn1, vkn2)
    else:
        voter.create_and_cast_vote(vote, cec.public_key, vcs2.public_key, vkn3, vkn4)

print("\n--- 4. –ï–¢–ê–ü –ü–Ü–î–†–ê–•–£–ù–ö–£ ---\n")
vkn1.send_to_vcs(1); vkn2.send_to_vcs(2)
vkn3.send_to_vcs(1); vkn4.send_to_vcs(2)

vcs1.assemble_and_verify(cec.public_key, voters)
vcs2.assemble_and_verify(cec.public_key, voters)

vcs1.decrypt_votes()
vcs2.decrypt_votes()

results1, ids1 = vcs1.count_votes()
results2, ids2 = vcs2.count_votes()

print("\n--- 5. –§–Ü–ù–ê–õ–Ü–ó–ê–¶–Ü–Ø –í –¶–í–ö ---\n")
final_tally = results1 + results2
all_counted_ids = ids1.union(ids2)
cec.publish_results(final_tally, all_counted_ids)

def run_tests():
    """
    –ó–∞–ø—É—Å–∫–∞—î –Ω–∞–±—ñ—Ä —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—ñ–π–∫–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏ –¥–æ —Ç–∏–ø–æ–≤–∏—Ö –∞—Ç–∞–∫.
    """
    print("\n" + "="*50)
    print("üöÄüöÄüöÄ –ü–û–ß–ê–¢–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–£ üöÄüöÄüöÄ")
    print("="*50)

    print("\n--- [–ï—Ç–∞–ø 0]: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ---\n")
    primes_test = [p for p in range(8000, 12000) if is_prime(p)]
    p_test, q_test = random.sample(primes_test, 2)

    TEST_VOTER_NAMES = ["–¢–µ—Å—Ç–æ–≤–∏–π-–í–∏–±–æ—Ä–µ—Ü—å-A", "–¢–µ—Å—Ç–æ–≤–∏–π-–í–∏–±–æ—Ä–µ—Ü—å-B", "–¢–µ—Å—Ç–æ–≤–∏–π-–í–∏–±–æ—Ä–µ—Ü—å-C"]
    
    rb_test = RegistrationBureau(TEST_VOTER_NAMES)
    voter_tokens_test = rb_test.verify_and_issue_tokens()
    voter_list_test, token_db_test = rb_test.get_databases()

    cec_test = CEC(p_test, q_test, token_db_test)
    vcs_test = MediumLevelCommission("–¢–µ—Å—Ç-–í–ö–°-1", p_test, q_test)
    vkn1_test = LowLevelCommission("–¢–µ—Å—Ç-–í–ö–ù-1", vcs_test)
    vkn2_test = LowLevelCommission("–¢–µ—Å—Ç-–í–ö–ù-2", vcs_test)
    
    cec_test.jurisdictions[vcs_test.name] = voter_list_test
    
    voters_test = {}
    for i, name in enumerate(TEST_VOTER_NAMES, start=100): 
        voters_test[name] = Voter(name, p_test, q_test, voter_tokens_test[name], ballot_id=i)
    
    for voter in voters_test.values():
        voter.get_blind_signature(cec_test)
    
    print("\n--- ‚úÖ –¢–µ—Å—Ç–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. ---\n")

    print("\n--- [–¢–µ—Å—Ç –ê]: –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥—Ä—É–≥–∏–π —Å–ª—ñ–ø–∏–π –ø—ñ–¥–ø–∏—Å –∑ —Ç–∏–º —Å–∞–º–∏–º —Ç–æ–∫–µ–Ω–æ–º ---\n")
    test_voter_A = voters_test["–¢–µ—Å—Ç–æ–≤–∏–π-–í–∏–±–æ—Ä–µ—Ü—å-A"]
    print(f"üë§ {test_voter_A.name} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–µ –æ–¥–Ω–æ–≥–æ –ø—ñ–¥–ø–∏—Å—É –≤—ñ–¥ –¶–í–ö.")
    
    try:
        test_voter_A.get_blind_signature(cec_test)
    except PermissionError as e:
        print(f"‚úÖ –£–°–ü–Ü–•: –¶–í–ö –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥—Ö–∏–ª–∏–ª–∞ –∑–∞–ø–∏—Ç –∑ –ø–æ–º–∏–ª–∫–æ—é: '{e}'")
    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: –û—á—ñ–∫—É–≤–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ PermissionError, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ —ñ–Ω—à–∞: {type(e).__name__}")

    print("\n--- [–¢–µ—Å—Ç B]: –°–ø—Ä–æ–±–∞ –ø–æ–¥–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –±—é–ª–µ—Ç–µ–Ω—è –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º –ï–¶–ü –≤–∏–±–æ—Ä—Ü—è ---\n")
    test_voter_B = voters_test["–¢–µ—Å—Ç–æ–≤–∏–π-–í–∏–±–æ—Ä–µ—Ü—å-B"]
    vote = CANDIDATES["–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ"]
    
    ballot_int = test_voter_B.ballot_id * 10 + vote
    c = encrypt(vcs_test.public_key, ballot_int)
    n_vcs = vcs_test.public_key[1]
    _, n_cec = cec_test.public_key
    r1 = random.randint(2, n_vcs - 1)
    r2 = (c * mod_inverse(r1, n_vcs)) % n_vcs
    t1 = random.randint(2, n_cec - 1)
    t2 = (test_voter_B.cec_signature * mod_inverse(t1, n_cec)) % n_cec
    part1, part2 = (r1, t1), (r2, t2)

    valid_sig1 = sign(test_voter_B.private_key, int_hash(part1, test_voter_B.public_key[1]))
    invalid_sig1 = valid_sig1 + 10 
    
    print(f"üë§ {test_voter_B.name} –Ω–∞–¥—Å–∏–ª–∞—î —á–∞—Å—Ç–∏–Ω—É 1 –¥–æ {vkn1_test.name} –∑ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–º –ï–¶–ü.")
    
    try:
        vkn1_test.receive_part(test_voter_B.public_key, test_voter_B.name, part1, invalid_sig1, 1)
    except ValueError as e:
        print(f"‚úÖ –£–°–ü–Ü–•: {vkn1_test.name} –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥—Ö–∏–ª–∏–ª–∞ —á–∞—Å—Ç–∏–Ω—É –±—é–ª–µ—Ç–µ–Ω—è –∑ –ø–æ–º–∏–ª–∫–æ—é: '{e}'")
    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: –û—á—ñ–∫—É–≤–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ ValueError, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ —ñ–Ω—à–∞: {type(e).__name__}")

    print("\n--- [–¢–µ—Å—Ç C]: –°–ø—Ä–æ–±–∞ –∑—ñ–±—Ä–∞—Ç–∏ –±—é–ª–µ—Ç–µ–Ω—å –∑ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º –ø—ñ–¥–ø–∏—Å–æ–º –¶–í–ö ---\n")
    test_voter_C = voters_test["–¢–µ—Å—Ç–æ–≤–∏–π-–í–∏–±–æ—Ä–µ—Ü—å-C"]
    
    print(f"üß© {vcs_test.name} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∑—ñ–±—Ä–∞—Ç–∏ –±—é–ª–µ—Ç–µ–Ω—å –¥–ª—è {test_voter_C.name}, –∞–ª–µ –º–∏ —Å–∏–º—É–ª—é—î–º–æ, —â–æ —Å–ª—ñ–ø–∏–π –ø—ñ–¥–ø–∏—Å s –±—É–ª–æ –ø—ñ–¥—Ä–æ–±–ª–µ–Ω–æ.")
    
    s_valid = test_voter_C.cec_signature
    s_invalid = s_valid + 10 
    ballot_hash = int_hash(test_voter_C.ballot_id, n_cec)

    is_valid_ok = verify_signature(cec_test.public_key, s_valid, ballot_hash)
    is_invalid_rejected = not verify_signature(cec_test.public_key, s_invalid, ballot_hash)

    print(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ) –ø—ñ–¥–ø–∏—Å—É –¶–í–ö... –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£—Å–ø—ñ—Ö' if is_valid_ok else '–ü—Ä–æ–≤–∞–ª'}")
    print(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ä–æ–±–ª–µ–Ω–æ–≥–æ –ø—ñ–¥–ø–∏—Å—É –¶–í–ö... –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–í—ñ–¥—Ö–∏–ª–µ–Ω–æ' if is_invalid_rejected else '–ü—Ä–∏–π–Ω—è—Ç–æ'}")

    if is_valid_ok and is_invalid_rejected:
        print(f"‚úÖ –£–°–ü–Ü–•: –ú–µ—Ö–∞–Ω—ñ–∑–º –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å—É –¶–í–ö –Ω–∞ —Ä—ñ–≤–Ω—ñ –í–ö–° –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: –ú–µ—Ö–∞–Ω—ñ–∑–º –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å—É –¶–í–ö –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, —è–∫ –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è.")

    print("\n" + "="*50)
    print("üèÅüèÅüèÅ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–£ –ó–ê–í–ï–†–®–ï–ù–û üèÅüèÅüèÅ")
    print("="*50)


run_tests()