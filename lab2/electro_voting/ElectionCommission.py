import random
from electro_voting.hashing import quadratic_hash
from electro_voting.key_generation import generate_rsa_keys
from electro_voting.blind import blind, sign_blinded, unmask_blinded_for_verification, verify_signature
from electro_voting.sign import decrypt
from electro_voting.candidates import CODE_TO_CANDIDATE

class CentralElectionCommission:
    def __init__(self, candidates, voter_ids):
        self.candidates = {candidate: 0 for candidate in candidates}
        self.voter_ids = voter_ids
        self.voters_who_signed = set()
        self.received_uids = set()
        self.published_ballots = []
        self.candidates_list = candidates 

        p, q = 61, 53
        self.public_key, self.private_key = generate_rsa_keys(p, q)
        self.n_cec = self.public_key[1]
        print("üîë –¶–í–ö –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∞ –≤–ª–∞—Å–Ω—É –ø–∞—Ä—É –∫–ª—é—á—ñ–≤.")
        
    def register_voter_for_signing(self, voter_id: str):
        """ –î–æ–¥–∞—î –Ω–æ–≤–∏–π ID –≤–∏–±–æ—Ä—Ü—è –¥–æ —Å–ø–∏—Å–∫—É, –¥–æ–∑–≤–æ–ª—è—é—á–∏ –π–æ–º—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å. """
        if voter_id not in self.voter_ids:
            self.voter_ids.append(voter_id)
            print(f"[{voter_id}]: ‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –≤–∏–±–æ—Ä—Ü—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.")
        else:
            print(f"[{voter_id}]: ‚ÑπÔ∏è –í–∏–±–æ—Ä–µ—Ü—å –≤–∂–µ –±—É–≤ —É –ø–æ—á–∞—Ç–∫–æ–≤–æ–º—É —Å–ø–∏—Å–∫—É.")

    def receive_ballot_sets_for_signing(self, voter_id: str, blinded_ballot_sets: list, r_values: list, content_sets: list):
        """–ö—Ä–æ–∫–∏ 5-7: –ü—Ä–∏–π–º–∞—î, –ø–µ—Ä–µ–≤—ñ—Ä—è—î (9/10) —Ç–∞ –ø—ñ–¥–ø–∏—Å—É—î (1/10)."""
        if voter_id in self.voters_who_signed:
            print(f"[{voter_id}]: ‚ùå –í–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤ –ø—ñ–¥–ø–∏—Å. –ó–∞–ø–∏—Ç –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ.")
            return None, None
            
        print(f"[{voter_id}]: üì• –û—Ç—Ä–∏–º–∞–Ω–æ 10 –Ω–∞–±–æ—Ä—ñ–≤ –±—é–ª–µ—Ç–µ–Ω—ñ–≤ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É.")
        
        NUM_SETS = len(blinded_ballot_sets)
        set_to_sign_index = random.randint(0, NUM_SETS - 1)
        
        set_to_sign = {}
        r_to_sign = 0
        
        for i in range(NUM_SETS):
            r = r_values[i]
            
            revealed_set = {
                'blinded_set': blinded_ballot_sets[i],
                'content_set': content_sets[i],
                'uid': content_sets[i][self.candidates_list[0]].split('|')[0] 
            }
            
            if i == set_to_sign_index:
                set_to_sign = blinded_ballot_sets[i]
                r_to_sign = r
                print(f"[{voter_id}]: ‚û°Ô∏è –ù–∞–±—ñ—Ä {i+1} –ø–æ–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É (–Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è).")
            else:
                print(f"[{voter_id}]: üîé –ü–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è –Ω–∞–±—ñ—Ä {i+1}...")
                
                is_valid = self._verify_ballot_set(revealed_set, r)
                
                if not is_valid:
                    print(f"[{voter_id}]: ‚ùå –®–ê–•–†–ê–ô–°–¢–í–û –≤–∏—è–≤–ª–µ–Ω–æ –≤ –Ω–∞–±–æ—Ä—ñ {i+1}. –ü—ñ–¥–ø–∏—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
                    return None, None
                print(f"[{voter_id}]: ‚úÖ –ù–∞–±—ñ—Ä {i+1} –∫–æ—Ä–µ–∫—Ç–Ω–∏–π.")

        signed_set = {}
        for candidate, blinded_hash in set_to_sign.items():
            signed_hash_prime = sign_blinded(blinded_hash, self.private_key)
            signed_set[candidate] = signed_hash_prime
            
        self.voters_who_signed.add(voter_id)
        print(f"[{voter_id}]: ‚úÖ –ü—ñ–¥–ø–∏—Å–∞–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –Ω–∞–±—ñ—Ä. –í–∏–±–æ—Ä—Ü—è –ø–æ–∑–Ω–∞—á–µ–Ω–æ.")
        
        return signed_set, r_to_sign

    def _verify_ballot_set(self, revealed_set: dict, r: int) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Ä–æ–∑–∫—Ä–∏—Ç–æ–≥–æ –Ω–∞–±–æ—Ä—É –±—é–ª–µ—Ç–µ–Ω—ñ–≤ (–ö—Ä–æ–∫ 6).

        revealed_set –º—ñ—Å—Ç–∏—Ç—å:
        - 'blinded_set': –∑–∞–º–∞—Å–∫–æ–≤–∞–Ω—ñ —Ö–µ—à—ñ
        - 'content_set': –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –≤–º—ñ—Å—Ç –±—é–ª–µ—Ç–µ–Ω—ñ–≤ (UID|–ö–∞–Ω–¥–∏–¥–∞—Ç)
        - 'uid': —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –≤–∏–±–æ—Ä—Ü—è –¥–ª—è —Ü—å–æ–≥–æ –Ω–∞–±–æ—Ä—É
        """
        
        blinded_set = revealed_set['blinded_set']
        content_set = revealed_set['content_set']
        set_uid = revealed_set['uid']
        
        if len(blinded_set) != len(self.candidates_list) or len(content_set) != len(self.candidates_list):
            print("¬†¬† -> ‚ùå –ü–ï–†–ï–í–Ü–†–ö–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—é–ª–µ—Ç–µ–Ω—ñ–≤ —É –Ω–∞–±–æ—Ä—ñ.")
            return False 

        candidates_in_set = set(content_set.keys())
        if candidates_in_set != set(self.candidates_list):
            print("¬†¬† -> ‚ùå –ü–ï–†–ï–í–Ü–†–ö–ê: –ù–∞–±—ñ—Ä –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –±—é–ª–µ—Ç–µ–Ω—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤.")
            return False

        for candidate, blinded_hash in blinded_set.items():
            expected_content = f"{set_uid}|{candidate}"
            
            if content_set.get(candidate) != expected_content:
                 print(f"¬†¬† -> ‚ùå –ü–ï–†–ï–í–Ü–†–ö–ê: –†–æ–∑–∫—Ä–∏—Ç–∏–π –≤–º—ñ—Å—Ç –¥–ª—è '{candidate}' –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É.")
                 return False

            expected_hash = quadratic_hash(expected_content, self.n_cec)

            try:
                unmasked_hash = unmask_blinded_for_verification(blinded_hash, self.public_key, r)
            except Exception as e:
                print(f"   -> ‚ùå –ü–ï–†–ï–í–Ü–†–ö–ê: –ü–æ–º–∏–ª–∫–∞ –∑–Ω—è—Ç—Ç—è –º–∞—Å–∫—É–≤–∞–Ω–Ω—è: {e}.")
                return False

            if unmasked_hash != expected_hash:
                print(f"   -> ‚ùå –ü–ï–†–ï–í–Ü–†–ö–ê: –•–µ—à –ø—ñ—Å–ª—è –∑–Ω—è—Ç—Ç—è –º–∞—Å–∫—É–≤–∞–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É –¥–ª—è '{candidate}'.")
                print(f"      -> –û—á—ñ–∫—É–≤–∞–Ω–∏–π: {expected_hash}, –û—Ç—Ä–∏–º–∞–Ω–∏–π –ø—ñ—Å–ª—è —Ä–æ–∑–º–∞—Å–∫—É–≤–∞–Ω–Ω—è: {unmasked_hash}")
                return False
                    
            return True

    def receive_vote(self, vote_package: dict):
        """
        –ö—Ä–æ–∫ 10-11: –ü—Ä–∏–π–º–∞—î –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –≥–æ–ª–æ—Å, —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î –æ–±–∏–¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î.
        """
        uid = vote_package['uid']
        encrypted_choice = vote_package['encrypted_choice']
        encrypted_signature = vote_package['encrypted_signature']
        
        print(f"üì¨ –¶–í–ö –æ—Ç—Ä–∏–º–∞–ª–∞ –≥–æ–ª–æ—Å (UID: {uid}, –ó–∞—à.–í–∏–±—ñ—Ä: {encrypted_choice}, –ó–∞—à.–ü—ñ–¥–ø–∏—Å: {encrypted_signature})")
        
        signature = decrypt(self.private_key, encrypted_signature)
        print(f"¬† -> –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –ø—ñ–¥–ø–∏—Å –¶–í–ö: {signature}")

        choice_code = decrypt(self.private_key, encrypted_choice)
        
        try:
            choice = CODE_TO_CANDIDATE[choice_code] 
            print(f"¬† -> –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –≤–∏–±—ñ—Ä: '{choice}' (–ö–æ–¥: {choice_code})")
        except KeyError:
             print(f"¬† -> ‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–¥ –≤–∏–±–æ—Ä—É: {choice_code}. –ì–æ–ª–æ—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
             return

        if uid in self.received_uids:
            print(f"¬† -> ‚ùå –ü–û–í–¢–û–†–ù–ï –ì–û–õ–û–°–£–í–ê–ù–ù–Ø: UID '{uid}' –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ì–æ–ª–æ—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
            return

        hash_from_signature = verify_signature(signature, self.public_key)
        print(f"¬† -> –ó –ø—ñ–¥–ø–∏—Å—É –æ—Ç—Ä–∏–º–∞–Ω–æ —Ö–µ—à: {hash_from_signature}")

        message = f"{uid}|{choice}"
        expected_hash = quadratic_hash(message, self.n_cec)
        print(f"¬† -> –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ö–µ—à –¥–ª—è '{choice}': {expected_hash}")
        
        if hash_from_signature == expected_hash:
            print(f"¬† -> ‚úÖ –ü–Ü–î–ü–ò–° –í–ê–õ–Ü–î–ù–ò–ô. –ì–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.")
            self.candidates[choice] += 1
            self.received_uids.add(uid)
            # –ö—Ä–æ–∫ 12: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
            self.published_ballots.append({'uid': uid, 'choice': choice, 'signature': signature})
        else:
            print(f"¬† -> ‚ùå –ü–Ü–î–ü–ò–° –ù–ï–í–ê–õ–Ü–î–ù–ò–ô. –ì–æ–ª–æ—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
            
        print("-" * 20)


    def process_and_publish_results(self):
        """
        –ö—Ä–æ–∫ 12: –û–±—Ä–æ–±–ª—è—î –≥–æ–ª–æ—Å–∏ —Ç–∞ –ø—É–±–ª—ñ–∫—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.
        """
        print("\n--- üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ì–û–õ–û–°–£–í–ê–ù–ù–Ø ---")
        for candidate, votes in self.candidates.items():
            print(f"–ö–∞–Ω–¥–∏–¥–∞—Ç '{candidate}': {votes} –≥–æ–ª–æ—Å—ñ–≤")
        
        max_votes = max(self.candidates.values())
        winners = [candidate for candidate, num_votes in self.candidates.items() if num_votes == max_votes]
        if len(winners) > 1:
             print(f"\nü§ù –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω—ñ—á–∏—è! –ö–∞–Ω–¥–∏–¥–∞—Ç–∏ '{', '.join(winners)}'.")
        else:
            print(f"\nüèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winners[0]}")
            
        print("\n--- üìú –û–ü–£–ë–õ–Ü–ö–û–í–ê–ù–Ü –ë–Æ–õ–ï–¢–ï–ù–Ü (–¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏) ---")
        print(f"{'UID':<18} | {'–í–∏–±—ñ—Ä':<30} | {'–ü—ñ–¥–ø–∏—Å –¶–í–ö (–•–µ—à^d)':<10}")
        print("-" * 65)
        for ballot in self.published_ballots:
            print(f"{str(ballot['uid']):<18} | {ballot['choice']:<30} | {ballot['signature'] % 10000:<10}...")