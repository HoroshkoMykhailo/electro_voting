from electro_voting.ElectionCommission import CentralElectionCommission
from electro_voting.Voter import Voter
from electro_voting.candidates import CANDIDATES

VOTER_IDS = [f"–í–∏–±–æ—Ä–µ—Ü—å-{i+1}" for i in range(5)]

cec = CentralElectionCommission(CANDIDATES, VOTER_IDS)

voters = [Voter(v_id, cec.public_key) for v_id in VOTER_IDS]

print("\n" + "="*50)
print("1. –ï–¢–ê–ü: –ì–ï–ù–ï–†–ê–¶–Ü–Ø –¢–ê –ü–Ü–î–ü–ò–° –ë–Æ–õ–ï–¢–ï–ù–Ü–í (–ö—Ä–æ–∫–∏ 2-8)")
print("="*50)

voter_data_to_sign = {}
for voter in voters:
    blinded_sets, r_values, content_sets = voter.generate_ballot_sets(CANDIDATES, num_sets=10)
    voter_data_to_sign[voter.voter_id] = (voter, blinded_sets, r_values, content_sets)

for voter_id, (voter, blinded_sets, r_values, content_sets) in voter_data_to_sign.items():
    print("-" * 50)
    signed_set, r_to_sign = cec.receive_ballot_sets_for_signing(voter_id, blinded_sets, r_values, content_sets)
    
    if signed_set:
        voter.process_signed_ballots(signed_set, r_to_sign)
    print("\n" + "~"*20 + "\n")


print("\n" + "="*50)
print("2. –ï–¢–ê–ü: –ì–û–õ–û–°–£–í–ê–ù–ù–Ø –¢–ê –û–ë–†–û–ë–ö–ê (–ö—Ä–æ–∫–∏ 9-11)")
print("="*50)

choices = ["–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π", "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ", "–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π", "–í–æ–ª–æ–¥–∏–º–∏—Ä –ó–µ–ª–µ–Ω—Å—å–∫–∏–π", "–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ"]

for i, voter in enumerate(voters):
    print("-" * 50)
    vote_package = voter.vote(choices[i])
    cec.receive_vote(vote_package)
    
print("-" * 50)
cec.process_and_publish_results()

print("\n" + "="*50)
print("3. –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–†–û–¢–û–ö–û–õ–£ (a, b, c)")
print("="*50)
print("\n[a] –¢–µ—Å—Ç: –û–¥–∏–Ω –Ω–∞–±—ñ—Ä –Ω–∞ –≤–∏–±–æ—Ä—Ü—è")
extra_signed_set, extra_r_to_sign  = cec.receive_ballot_sets_for_signing(
    VOTER_IDS[0],
    voter_data_to_sign[VOTER_IDS[0]][1],
    voter_data_to_sign[VOTER_IDS[0]][2],
    voter_data_to_sign[VOTER_IDS[0]][3],
)
print("   -> –†–µ–∑—É–ª—å—Ç–∞—Ç:", "–í–∏–¥–∞–Ω–æ —â–µ –æ–¥–∏–Ω –Ω–∞–±—ñ—Ä!" if extra_signed_set else "–î–†–£–ì–ò–ô –ù–ê–ë–Ü–† –ù–ï –í–ò–î–ê–ù–û ‚úÖ")

print("\n[b] –¢–µ—Å—Ç: –î—É–±–ª—å–æ–≤–∞–Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è")
dup_vote = voters[1].vote("–ü–µ—Ç—Ä–æ –ü–æ—Ä–æ—à–µ–Ω–∫–æ")
cec.receive_vote(dup_vote) 
print("   -> –ì–æ–ª–æ—Å –≤–∏–±–æ—Ä—Ü—è-2 –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –∞–ª–µ –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–π ‚úÖ")

print("\n[c] –¢–µ—Å—Ç: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –Ω–∞–±–æ—Ä–∏ –±—é–ª–µ—Ç–µ–Ω—ñ–≤")

FRAUD_VOTER_ID = "–®–∞—Ö—Ä–∞–π-1"
cec.register_voter_for_signing(FRAUD_VOTER_ID)

fraud_voter = Voter(FRAUD_VOTER_ID, cec.public_key)

bad_blinded_sets, bad_r_values, bad_content_sets = fraud_voter.generate_ballot_sets(CANDIDATES, num_sets=10)

print(f"[{FRAUD_VOTER_ID}]: üòà –ó–º—ñ–Ω–µ–Ω–æ –≤–º—ñ—Å—Ç –Ω–∞–±–æ—Ä—É 1. –û—á—ñ–∫—É—î—Ç—å—Å—è –≤—ñ–¥–º–æ–≤–∞ —É –ø—ñ–¥–ø–∏—Å—ñ.")
import copy
fraud_content_sets = copy.deepcopy(bad_content_sets)
for cand in fraud_content_sets[0]:
    fraud_content_sets[0][cand] = f"–§–∞–ª—å—à–∏–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {cand}" 

bad_signed_set, bad_r_to_sign = cec.receive_ballot_sets_for_signing(
    FRAUD_VOTER_ID, 
    bad_blinded_sets, 
    bad_r_values, 
    fraud_content_sets
)

if bad_signed_set:
    print(f"    -> –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–∞–±—ñ—Ä –ø—ñ–¥–ø–∏—Å–∞–Ω–æ! (–¶–µ —Å—Ç–∞–ª–æ—Å—è, —è–∫—â–æ –¶–í–ö –≤–∏–ø–∞–¥–∫–æ–≤–æ –æ–±—Ä–∞–ª–∞ –®–ê–•–†–ê–ô–°–¨–ö–ò–ô –Ω–∞–±—ñ—Ä 1 –¥–ª—è –ø—ñ–¥–ø–∏—Å—É, —à–∞–Ω—Å 1/10).")
else:
    print("    -> –†–µ–∑—É–ª—å—Ç–∞—Ç: –¶–í–ö –í–Ü–î–ú–û–í–ò–õ–ê –£ –ü–Ü–î–ü–ò–°–Ü ‚úÖ (–®–∞—Ö—Ä–∞–π—Å—Ç–≤–æ –≤–∏—è–≤–ª–µ–Ω–æ –≤ –æ–¥–Ω–æ–º—É –∑ 9 —Ä–æ–∑–∫—Ä–∏—Ç–∏—Ö –Ω–∞–±–æ—Ä—ñ–≤).")