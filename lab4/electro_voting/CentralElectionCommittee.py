from electro_voting.key_generation import generate_rsa_keys
from electro_voting.encrypt import decrypt


class CentralElectionCommittee:
    def __init__(self, candidates_map, voters_list):
        print("üèõÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—É –í–∏–±–æ—Ä—á—É –ö–æ–º—ñ—Å—ñ—é (–¶–í–ö).")
        self.candidates = candidates_map
        self.id_to_candidate = {v: k for k, v in candidates_map.items()}
        self.voters = voters_list
        
        p, q = 61, 53
        self.public_key, self.private_key = generate_rsa_keys(p, q)
        self.n = self.public_key[1]
        print(f"üîë –¶–í–ö –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∞ –∫–ª—é—á—ñ. –í—ñ–¥–∫—Ä–∏—Ç–∏–π –∫–ª—é—á (e, n): {self.public_key}.")
        
        self.final_results = {}

    def distribute_voters(self, ec1, ec2):
        """–ù–∞–¥–∞—î –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤–∏–±–æ—Ä—Ü—ñ–≤ –æ–±–æ–º –í–ö –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å—ñ–≤."""
        ec1.set_voter_list(self.voters)
        ec2.set_voter_list(self.voters)
        print("üìú –¶–í–ö –Ω–∞–¥–∞–ª–∞ –ø–æ–≤–Ω—ñ —Å–ø–∏—Å–∫–∏ –≤–∏–±–æ—Ä—Ü—ñ–≤ –∫–æ–º—ñ—Å—ñ—è–º –í–ö-1 —Ç–∞ –í–ö-2 –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")


    def tally_votes(self, data_from_ec1, data_from_ec2):
        """–ö—Ä–æ–∫ 6: –ó–±–∏—Ä–∞—î –¥–∞–Ω—ñ, –æ–±'—î–¥–Ω—É—î –±—é–ª–µ—Ç–µ–Ω—ñ —Ç–∞ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î —ó—Ö."""
        print("\n=== üìä –ï–¢–ê–ü –ü–Ü–î–†–ê–•–£–ù–ö–£ –ì–û–õ–û–°–Ü–í (–¶–í–ö) ===")
        
        all_data = data_from_ec1 + data_from_ec2
        grouped_ballots = {}
        for item in all_data:
            anon_id = item['anonymous_id']
            if anon_id not in grouped_ballots:
                grouped_ballots[anon_id] = []
            grouped_ballots[anon_id].append(item['encrypted_part'])
        
        vote_counts = {name: 0 for name in self.candidates.keys()}

        for anon_id, parts in grouped_ballots.items():
            if len(parts) != 2:
                print(f"  -> ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –¥–ª—è ID {anon_id} –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–µ 2 —á–∞—Å—Ç–∏–Ω–∏ –±—é–ª–µ—Ç–µ–Ω—è. –ì–æ–ª–æ—Å –Ω–µ –≤—Ä–∞—Ö–æ–≤–∞–Ω–æ.")
                continue

            c1, c2 = parts[0], parts[1]
            
            combined_ciphertext = (c1 * c2) % self.n
            
            decrypted_candidate_id = decrypt(self.private_key, combined_ciphertext)
            
            self.final_results[anon_id] = decrypted_candidate_id
            
            candidate_name = self.id_to_candidate.get(decrypted_candidate_id, "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç")
            if candidate_name != "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç":
                vote_counts[candidate_name] += 1
            
            print(f"  -> ID –≤–∏–±–æ—Ä—Ü—è {anon_id}: C1={c1}, C2={c2}. C_combined={combined_ciphertext}. –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {decrypted_candidate_id} ({candidate_name})")
        
        return vote_counts

    def publish_final_results(self, vote_counts):
        """–ü—É–±–ª—ñ–∫—É—î —Ñ—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è."""
        print("\n--- üèÅ –û–°–¢–ê–¢–û–ß–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ì–û–õ–û–°–£–í–ê–ù–ù–Ø ---")
        for candidate, votes in vote_counts.items():
            print(f"–ö–∞–Ω–¥–∏–¥–∞—Ç '{candidate}': {votes} –≥–æ–ª–æ—Å—ñ–≤")
        
        max_votes = -1
        winners = []
        if vote_counts:
            max_votes = max(vote_counts.values())
            winners = [c for c, num in vote_counts.items() if num == max_votes]

        if len(winners) == 1:
            print(f"\nüèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winners[0]}")
        elif len(winners) > 1:
             print(f"\nü§ù –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω—ñ—á–∏—è –º—ñ–∂ {', '.join(winners)}.")
        else:
            print("\nü§∑ –ì–æ–ª–æ—Å—ñ–≤ –Ω–µ –±—É–ª–æ.")

        print("\n--- üìú –û–ü–£–ë–õ–Ü–ö–û–í–ê–ù–Ü –î–ê–ù–Ü –î–õ–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –í–ò–ë–û–†–¶–Ø–ú–ò ---")
        print(f"{'–ê–Ω–æ–Ω—ñ–º–Ω–∏–π ID':<15} | {'ID –ö–∞–Ω–¥–∏–¥–∞—Ç–∞':<15}")
        print("-" * 33)
        for anon_id, candidate_id in self.final_results.items():
            print(f"{anon_id:<15} | {candidate_id:<15}")