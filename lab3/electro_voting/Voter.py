import random
from electro_voting.key_generation import generate_rsa_keys
from electro_voting.hashing import quadratic_hash
from electro_voting.encrypt import encrypt
from electro_voting.candidates import CANDIDATE_TO_CODE

class Voter:
    def __init__(self, voter_id, public_key_ec):
        self.voter_id = voter_id
        self.public_key_ec = public_key_ec
        self.n_ec = public_key_ec[1]
        
        p, q = 79, 83
        self.public_key_voter, self.private_key_voter = generate_rsa_keys(p, q)
        print(f"[{self.voter_id}]: üîë –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –≤–ª–∞—Å–Ω—É –ø–∞—Ä—É –∫–ª—é—á—ñ–≤ –¥–ª—è –ï–¶–ü.")
        
        self.registration_number = None
        self.ballot_uid = random.randint(1, self.n_ec - 1)

    def register_with_rb(self, rb_instance):
        """ –ö—Ä–æ–∫ 1-2: –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É –ë—é—Ä–æ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. """
        self.registration_number = rb_instance.get_registration_number(self.voter_id)

    def sign_message(self, message: str) -> int:
        """ –ü—ñ–¥–ø–∏—Å—É—î —Ö–µ—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–≤–æ—ó–º –∑–∞–∫—Ä–∏—Ç–∏–º –∫–ª—é—á–µ–º (d, n_voter). """
        d, n_voter = self.private_key_voter
        message_hash = quadratic_hash(message, n_voter)
        signature = pow(message_hash, d, n_voter)
        return signature

    def vote(self, choice: str) -> dict:
        """
        –ö—Ä–æ–∫ 4: –°—Ç–≤–æ—Ä—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø—ñ–¥–ø–∏—Å—É—î –π–æ–≥–æ —Å–≤–æ—ó–º –∫–ª—é—á–µ–º
        —Ç–∞ —à–∏—Ñ—Ä—É—î –≤—ñ–¥–∫—Ä–∏—Ç–∏–º –∫–ª—é—á–µ–º –í–ö.
        –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è M = 'ID|RN|Choice|Signature_Voter'
        """
        if self.registration_number is None:
            raise Exception("–í–∏–±–æ—Ä–µ—Ü—å –Ω–µ –º–∞—î —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (RN).")
        
        if choice not in CANDIDATE_TO_CODE:
            raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: {choice}")
            
        choice_code = CANDIDATE_TO_CODE[choice]
        
        message_to_sign = f"{self.ballot_uid}|{self.registration_number}|{choice}"
        
        signature_voter = self.sign_message(message_to_sign)
        
        encrypted_id = encrypt(self.public_key_ec, self.ballot_uid)
        encrypted_rn = encrypt(self.public_key_ec, self.registration_number)
        encrypted_choice = encrypt(self.public_key_ec, choice_code)
        encrypted_sig = encrypt(self.public_key_ec, signature_voter)
        
        print(f"[{self.voter_id}]: ‚úÖ –°—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ –±—é–ª–µ—Ç–µ–Ω—å, –ø—ñ–¥–ø–∏—Å–∞–Ω–æ (–ï–¶–ü), –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ (–í–ö).")
        
        return {
            'encrypted_message': 0, 
            'encrypted_id': encrypted_id,
            'encrypted_rn': encrypted_rn,
            'encrypted_choice': encrypted_choice,
            'encrypted_sig': encrypted_sig,
        }, self.public_key_voter
    
    def verify_vote(self, published_ballots, choice: str):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≥–æ–ª–æ—Å –≤–∏–±–æ—Ä—Ü—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –í–ö."""
        for ballot in published_ballots:
            if ballot['id'] == str(self.ballot_uid) and ballot['choice'] == choice:
                print(f"[{self.voter_id}]: ‚úÖ –ì–æ–ª–æ—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ({choice}).")
                return True
        print(f"[{self.voter_id}]: ‚ùå –ü–û–ú–ò–õ–ö–ê: –ì–æ–ª–æ—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –∑–º—ñ–Ω–µ–Ω–æ!")
        return False