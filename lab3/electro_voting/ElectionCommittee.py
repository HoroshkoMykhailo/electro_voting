from electro_voting.encrypt import decrypt
from electro_voting.hashing import quadratic_hash
from electro_voting.key_generation import generate_rsa_keys, verify_signature
from electro_voting.candidates import CODE_TO_CANDIDATE

class ElectionCommittee:
    def __init__(self, candidates):
        self.candidates = {candidate: 0 for candidate in candidates}
        self.candidates_list = candidates

        p, q = 71, 73
        self.public_key, self.private_key = generate_rsa_keys(p, q)
        self.n_ec = self.public_key[1]
        print("üîë –í–∏–±–æ—Ä—á–∞ –ö–æ–º—ñ—Å—ñ—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∞ –≤–ª–∞—Å–Ω—É –ø–∞—Ä—É –∫–ª—é—á—ñ–≤.")
        
        self.available_rns = set() 
        self.successful_voter_ids = set() 
        self.published_ballots = [] 

    def receive_rns_from_rb(self, rns: set):
        """ –û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ RN –≤—ñ–¥ –ë–† (–ö—Ä–æ–∫ 3). """
        self.available_rns.update(rns)
        print(f"üìù –í–ö –æ—Ç—Ä–∏–º–∞–ª–∞ {len(rns)} RN –≤—ñ–¥ –ë–†.")

    def receive_vote_package(self, vote_package: dict, voter_public_key: tuple) -> bool:
        """
        –ö—Ä–æ–∫ 5: –ü—Ä–∏–π–º–∞—î –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –≥–æ–ª–æ—Å, —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î, –ø–µ—Ä–µ–≤—ñ—Ä—è—î RN —Ç–∞ –ï–¶–ü.
        vote_package = {'encrypted_message': C}
        –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è M = 'ID|RN|Choice|Signature_Voter'
        """
        
        # 1. –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ó–∞–∫—Ä–∏—Ç–∏–º –∫–ª—é—á–µ–º –í–ö)
        # –£–≤–∞–≥–∞: –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω –±—É–≤ –±–∏ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º, 
        # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≥—ñ–±—Ä–∏–¥–Ω–µ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è, –∞–±–æ RSA –¥–æ–∑–≤–æ–ª—è—î –ª–∏—à–µ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
        # –æ–¥–Ω–æ–≥–æ –≤–µ–ª–∏–∫–æ–≥–æ —á–∏—Å–ª–∞. –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è, –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ —á–∏—Å–ª–æ
        # –º—ñ—Å—Ç–∏—Ç—å –æ–±'—î–¥–Ω–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (ID|RN|Choice|Signature). 
        # –û—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –º–∞—î–º–æ –º–µ—Ö–∞–Ω—ñ–∑–º—É –¥–ª—è —Ç–∞–∫–æ–≥–æ –æ–±'—î–¥–Ω–∞–Ω–Ω—è/—Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –≤
        # —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª–∞—Ö, *—ñ–º—ñ—Ç—É—î–º–æ* –ø–µ—Ä–µ–¥–∞—á—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö:
        
        try:
            # –¢—É—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –º–∞—î –±—É—Ç–∏: decrypt(private_key, encrypted_message) 
            # –∑ –ø–æ–¥–∞–ª—å—à–æ—é –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é. –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó:
            rn = decrypt(self.private_key, vote_package.get('encrypted_rn', 0))
            voter_id = decrypt(self.private_key, vote_package.get('encrypted_id', 0))
            choice_code = decrypt(self.private_key, vote_package.get('encrypted_choice', 0))
            signature_voter = decrypt(self.private_key, vote_package.get('encrypted_sig', 0))

            if not all([rn, voter_id, choice_code, signature_voter]):
                 print("¬† -> ‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∏ –±—é–ª–µ—Ç–µ–Ω—è.")
                 return False

            voter_id = str(voter_id)
            rn = int(rn)

        except Exception as e:
            print(f"¬† -> ‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –≥–æ–ª–æ—Å. {e}")
            return False

        print(f"üì¨ –í–ö –æ—Ç—Ä–∏–º–∞–ª–∞ —Ç–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–ª–∞ –≥–æ–ª–æ—Å (ID: {voter_id}, RN: {rn})")

        if rn not in self.available_rns:
            print(f"¬† -> ‚ùå RN '{rn}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π. –ì–æ–ª–æ—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
            return False
            
        try:
            choice = CODE_TO_CANDIDATE[choice_code]
        except KeyError:
            print(f"¬† -> ‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–¥ –≤–∏–±–æ—Ä—É: {choice_code}. –ì–æ–ª–æ—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
            return False

        message_to_verify = f"{voter_id}|{rn}|{choice}"
        expected_hash = quadratic_hash(message_to_verify, voter_public_key[1])
        
        hash_from_signature = verify_signature(signature_voter, voter_public_key)
        
        print(f"¬† -> –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ö–µ—à: {expected_hash}, –û—Ç—Ä–∏–º–∞–Ω–∏–π –∑ –ø—ñ–¥–ø–∏—Å—É: {hash_from_signature}")

        if hash_from_signature != expected_hash:
            print("¬† -> ‚ùå –ï–¶–ü –≤–∏–±–æ—Ä—Ü—è –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞. –ì–æ–ª–æ—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
            return False

        self.available_rns.remove(rn)
        self.successful_voter_ids.add(voter_id)
        self.candidates[choice] += 1
        
        self.published_ballots.append({
            'id': voter_id, 
            'rn': rn, 
            'choice': choice, 
            'signature': signature_voter
        })
        
        print(f"¬† -> ‚úÖ –ì–û–õ–û–° –ó–ê–†–ê–•–û–í–ê–ù–û. RN '{rn}' –≤–∏–∫—Ä–µ—Å–ª–µ–Ω–æ.")
        return True

    def process_and_publish_results(self):
        """ –ö—Ä–æ–∫ 6: –ü—É–±–ª—ñ–∫—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ —Å–ø–∏—Å–æ–∫ –±—é–ª–µ—Ç–µ–Ω—ñ–≤. """
        print("\n--- üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ì–û–õ–û–°–£–í–ê–ù–ù–Ø ---")
        for candidate, votes in self.candidates.items():
            print(f"–ö–∞–Ω–¥–∏–¥–∞—Ç '{candidate}': {votes} –≥–æ–ª–æ—Å—ñ–≤")
        
        max_votes = max(self.candidates.values())
        winners = [c for c, num in self.candidates.items() if num == max_votes]
        print(f"\nüèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winners[0]}" if len(winners) == 1 else f"\nü§ù –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω—ñ—á–∏—è! {', '.join(winners)}.")
        
        print("\n--- üìú –û–ü–£–ë–õ–Ü–ö–û–í–ê–ù–Ü –ë–Æ–õ–ï–¢–ï–ù–Ü (ID —Ç–∞ –ø—ñ–¥–ø–∏—Å –≤–∏–±–æ—Ä—Ü—è) ---")
        print(f"{'–í–∏–±–æ—Ä–µ—Ü—å ID':<18} | {'RN':<10} | {'–í–∏–±—ñ—Ä':<30} | {'–ü—ñ–¥–ø–∏—Å –í–∏–±–æ—Ä—Ü—è (–•–µ—à^d)':<10}")
        print("-" * 75)
        for ballot in self.published_ballots:
            print(f"{str(ballot['id']):<18} | {ballot['rn']:<10} | {ballot['choice']:<30} | {ballot['signature'] % 10000:<10}...")