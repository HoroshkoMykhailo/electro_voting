import random
from electro_voting.key_generation import generate_rsa_keys, is_prime

class RegistrationBureau:
    def __init__(self):
        p, q = 67, 59
        self.public_key_rb, self.private_key_rb = generate_rsa_keys(p, q)
        print("üîë –ë—é—Ä–æ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–æ –≤–ª–∞—Å–Ω—É –ø–∞—Ä—É –∫–ª—é—á—ñ–≤.")
        
        self.registered_voters = {} 
        self.available_rns = set()
        self.rn_counter = 1

    def get_registration_number(self, voter_id: str) -> int:
        """ –ö—Ä–æ–∫ 1-2: –í–∏–±–æ—Ä–µ—Ü—å –∑–∞–ø–∏—Ç—É—î RN. –ë–† –≤–∏–¥–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π RN. """
        if voter_id in self.registered_voters:
            print(f"[{voter_id}]: ‚ùå –í–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ (RN: {self.registered_voters[voter_id]}).")
            return self.registered_voters[voter_id]
        
        new_rn = self.rn_counter
        self.rn_counter += 1
        
        self.registered_voters[voter_id] = new_rn
        self.available_rns.add(new_rn)
        
        print(f"[{voter_id}]: ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –ù–æ–º–µ—Ä (RN): {new_rn}.")
        return new_rn

    def send_rns_to_ec(self):
        """ –ö—Ä–æ–∫ 3: –ë–† –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–∏—Å–æ–∫ RN –¥–æ –í–ö (–±–µ–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–ª–∞—Å–Ω–∏–∫—ñ–≤). """
        rns_to_send = self.available_rns.copy()
        self.available_rns.clear() 
        print(f"üì° –ë–† –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î {len(rns_to_send)} RN –¥–æ –í–∏–±–æ—Ä—á–æ—ó –ö–æ–º—ñ—Å—ñ—ó.")
        return rns_to_send
